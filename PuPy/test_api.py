"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ PuPy REST API

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python PuPy/test_api.py [api_url]

–î–µ api_url - –±–∞–∑–æ–≤–∞ URL API (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: http://localhost:8000)
"""
import sys
import requests
import json


def test_endpoint(base_url: str, endpoint: str, method: str = 'GET', params: dict = None):
    """
    –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ endpoint
    
    Args:
        base_url: –ë–∞–∑–æ–≤–∞ URL API
        endpoint: Endpoint –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        method: HTTP –º–µ—Ç–æ–¥ (GET –∞–±–æ POST)
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É
    """
    url = f"{base_url}{endpoint}"
    print(f"\n{'='*80}")
    print(f"üîç Testing: {method} {url}")
    if params:
        print(f"üìù Parameters: {params}")
    print(f"{'='*80}")
    
    try:
        if method == 'GET':
            response = requests.get(url, params=params, timeout=10)
        else:
            response = requests.post(url, params=params, timeout=10)
        
        print(f"‚úÖ Status: {response.status_code}")
        
        if response.status_code == 200:
            try:
                data = response.json()
                print(f"üì¶ Response (first 500 chars):")
                json_str = json.dumps(data, indent=2, ensure_ascii=False)
                if len(json_str) > 500:
                    print(json_str[:500] + "\n... (truncated)")
                else:
                    print(json_str)
            except:
                print(f"üì¶ Response: {response.text[:500]}")
        else:
            print(f"‚ùå Error: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    base_url = sys.argv[1] if len(sys.argv) > 1 else "http://localhost:8000"
    
    print(f"üöÄ Testing PuPy REST API at {base_url}")
    print(f"{'='*80}")
    
    # –¢–µ—Å—Ç 1: –ö–æ—Ä–µ–Ω–µ–≤–∏–π endpoint
    test_endpoint(base_url, "/", "GET")
    
    # –¢–µ—Å—Ç 2: Table-valued function - databases list
    test_endpoint(base_url, "/databases/list", "GET")
    
    # –¢–µ—Å—Ç 3: Scalar function - get database details
    test_endpoint(base_url, "/databases/get", "GET", {"databaseName": "msdb"})
    
    # –¢–µ—Å—Ç 4: Table-valued function - tables list
    test_endpoint(base_url, "/tables/list", "GET")
    
    # –¢–µ—Å—Ç 5: Scalar function - get table details
    # test_endpoint(base_url, "/tables/get", "GET", {"name": "dbo.sysjobs"})
    
    # –¢–µ—Å—Ç 6: Table-valued function - procedures list
    test_endpoint(base_url, "/procedures/list", "GET")
    
    # –¢–µ—Å—Ç 7: Stored procedure - object references
    # test_endpoint(base_url, "/pupy/objectReferences", "POST", {"object": "msdb.dbo.sysjobs"})
    
    # –¢–µ—Å—Ç 8: Stored procedure - script table
    # test_endpoint(base_url, "/pupy/scriptTable", "POST", {"name": "dbo.sysjobs"})
    
    print(f"\n{'='*80}")
    print(f"‚úÖ Testing completed!")
    print(f"üìñ Full API documentation: {base_url}/docs")
    print(f"{'='*80}\n")


if __name__ == "__main__":
    main()
