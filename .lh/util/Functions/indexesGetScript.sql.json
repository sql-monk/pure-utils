{
    "sourceFile": "util/Functions/indexesGetScript.sql",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758022338804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758024321019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,27 @@\n+/*\r\n+# Description\r\n+Генерує DDL скрипти для створення індексів на основі існуючих індексів таблиць.\r\n+Функція формує повні CREATE INDEX інструкції включаючи всі налаштування індексу.\r\n+\r\n+# Parameters\r\n+@table NVARCHAR(128) = NULL - Назва таблиці для генерації скриптів індексів (NULL = усі таблиці)\r\n+@index NVARCHAR(128) = NULL - Назва конкретного індексу (NULL = усі індекси)\r\n+\r\n+# Returns\r\n+TABLE - Повертає таблицю з колонками:\r\n+- SchemaName NVARCHAR(128) - Назва схеми\r\n+- TableName NVARCHAR(128) - Назва таблиці\r\n+- IndexName NVARCHAR(128) - Назва індексу\r\n+- CreateScript NVARCHAR(MAX) - DDL скрипт для створення індексу\r\n+\r\n+# Usage\r\n+-- Згенерувати скрипти для всіх індексів конкретної таблиці\r\n+SELECT * FROM util.indexesGetScript('myTable', NULL);\r\n+\r\n+-- Згенерувати скрипт для конкретного індексу\r\n+SELECT * FROM util.indexesGetScript('myTable', 'myIndex');\r\n+*/\r\n CREATE FUNCTION util.indexesGetScript(@table NVARCHAR(128) = NULL, @index NVARCHAR(128) = NULL)\r\n RETURNS TABLE\r\n AS\r\n RETURN(\r\n"
                }
            ],
            "date": 1758022338804,
            "name": "Commit-0",
            "content": "CREATE FUNCTION util.indexesGetScript(@table NVARCHAR(128) = NULL, @index NVARCHAR(128) = NULL)\r\nRETURNS TABLE\r\nAS\r\nRETURN(\r\n\tWITH IndexDetails AS (\r\n\t\tSELECT\r\n\t\t\ti.object_id,\r\n\t\t\ti.index_id,\r\n\t\t\tOBJECT_SCHEMA_NAME(i.object_id) schemaName,\r\n\t\t\tOBJECT_NAME(i.object_id) tableName,\r\n\t\t\ti.name indexName,\r\n\t\t\ti.type_desc indexType,\r\n\t\t\ti.is_unique,\r\n\t\t\ti.is_primary_key,\r\n\t\t\ti.is_unique_constraint,\r\n\t\t\ti.filter_definition,\r\n\t\t\ti.fill_factor,\r\n\t\t\ti.ignore_dup_key,\r\n\t\t\ti.allow_row_locks,\r\n\t\t\ti.allow_page_locks,\r\n\t\t\ti.has_filter\r\n\t\tFROM sys.indexes i\r\n\t\tWHERE\r\n\t\t\ti.name IS NOT NULL\r\n\t\t\tAND i.is_hypothetical = 0\r\n\t\t\tAND (@table IS NULL OR i.object_id = ISNULL(TRY_CONVERT(INT, @table), OBJECT_ID(@table)))\r\n\t\t\tAND (@index IS NULL OR i.name = @index)\r\n\t),\r\n\tIndexColumns AS (\r\n\t\tSELECT\r\n\t\t\tid.object_id,\r\n\t\t\tid.index_id,\r\n\t\t\tSTRING_AGG(QUOTENAME(c.name) + CASE WHEN ic.is_descending_key = 1 THEN ' DESC' ELSE ' ASC' END, ', ') WITHIN GROUP(ORDER BY ic.key_ordinal) keyColumns\r\n\t\tFROM IndexDetails id\r\n\t\t\tINNER JOIN sys.index_columns(NOLOCK) ic ON id.object_id = ic.object_id AND id.index_id = ic.index_id AND ic.is_included_column = 0\r\n\t\t\tINNER JOIN sys.columns(NOLOCK) c ON ic.object_id = c.object_id AND ic.column_id = c.column_id\r\n\t\tGROUP BY\r\n\t\t\tid.object_id,\r\n\t\t\tid.index_id\r\n\t),\r\n\tIncludedColumns AS (\r\n\t\tSELECT\r\n\t\t\tid.object_id,\r\n\t\t\tid.index_id,\r\n\t\t\tSTRING_AGG(QUOTENAME(c.name), ', ') includedColumns\r\n\t\tFROM IndexDetails id\r\n\t\t\tINNER JOIN sys.index_columns(NOLOCK) ic ON id.object_id = ic.object_id AND id.index_id = ic.index_id AND ic.is_included_column = 1\r\n\t\t\tINNER JOIN sys.columns(NOLOCK) c ON ic.object_id = c.object_id AND ic.column_id = c.column_id\r\n\t\tGROUP BY\r\n\t\t\tid.object_id,\r\n\t\t\tid.index_id\r\n\t)\r\n\tSELECT\r\n\t\tutil.metadataGetIndexName(id.object_id, id.index_id) tableName,\r\n\t\t'CREATE ' + CASE\r\n\t\t\t\t\t\t\t\t\tWHEN id.is_unique = 1 AND id.is_primary_key = 0 AND id.is_unique_constraint = 0 THEN 'UNIQUE '\r\n\t\t\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\t\t\tEND + CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN id.indexType = 'CLUSTERED' THEN 'CLUSTERED INDEX '\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHEN id.indexType = 'NONCLUSTERED' THEN 'NONCLUSTERED INDEX '\r\n\t\t\t\t\t\t\t\t\t\t\t\tELSE 'INDEX '\r\n\t\t\t\t\t\t\t\t\t\t\tEND + QUOTENAME(id.indexName) + ' ON ' + QUOTENAME(id.schemaName) + '.' + QUOTENAME(id.tableName) + ' (' + ic.keyColumns + ')'\r\n\t\t+ CASE\r\n\t\t\t\tWHEN incl.includedColumns IS NOT NULL THEN ' INCLUDE (' + incl.includedColumns + ')'\r\n\t\t\t\tELSE ''\r\n\t\t\tEND + CASE\r\n\t\t\t\t\t\t\tWHEN id.has_filter = 1 AND id.filter_definition IS NOT NULL THEN ' WHERE ' + id.filter_definition\r\n\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\tEND + ' WITH (' + CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN id.fill_factor > 0 THEN 'FILLFACTOR = ' + CAST(id.fill_factor AS NVARCHAR(3)) + ', '\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND + 'IGNORE_DUP_KEY = ' + CASE WHEN id.ignore_dup_key = 1 THEN 'ON' ELSE 'OFF' END + ', ' + 'ALLOW_ROW_LOCKS = '\r\n\t\t+ CASE WHEN id.allow_row_locks = 1 THEN 'ON' ELSE 'OFF' END + ', ' + 'ALLOW_PAGE_LOCKS = ' + CASE WHEN id.allow_page_locks = 1 THEN 'ON' ELSE 'OFF' END\r\n\t\t+ ');' statement\r\n\tFROM IndexDetails id\r\n\t\tINNER JOIN IndexColumns ic ON id.object_id = ic.object_id AND id.index_id = ic.index_id\r\n\t\tLEFT JOIN IncludedColumns incl ON id.object_id = incl.object_id AND id.index_id = incl.index_id\r\n);"
        }
    ]
}