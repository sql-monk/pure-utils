"""
PuPy - REST API –∑ FastAPI –ø–æ–≤–µ—Ä—Ö SQL Server (—Å—Ö–µ–º–∞ pupy)

–£–≤–µ—Å—å –±—ñ–∑–Ω–µ—Å –ª–æ–≥—ñ–∫–∞ ‚Äî –≤ SQL (–ø—Ä–æ—Ü–µ–¥—É—Ä–∏/—Ñ—É–Ω–∫—Ü—ñ—ó/–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è),
Python ‚Äî —Ç—ñ–ª—å–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è + —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è.

HTTP ‚Üí FastAPI (PuPy) ‚Üí SQL Server (schema pupy) ‚Üí JSON
"""
import argparse
import sys
import os
import getpass
import uvicorn

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(__file__))

from database import DatabaseConnection
from router import create_app


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞"""
    parser = argparse.ArgumentParser(
        description='PuPy - FastAPI REST API for SQL Server (schema pupy)'
    )
    
    parser.add_argument(
        '--server',
        type=str,
        default='localhost',
        help='SQL Server hostname/IP (default: localhost)'
    )
    
    parser.add_argument(
        '--port',
        type=int,
        default=1433,
        help='SQL Server port (default: 1433)'
    )
    
    parser.add_argument(
        '--user',
        type=str,
        default=None,
        help='SQL username (if not provided, uses Windows Auth)'
    )
    
    parser.add_argument(
        '--database',
        type=str,
        default='msdb',
        help='Default database (default: msdb)'
    )
    
    parser.add_argument(
        '--trust-server-certificate',
        action='store_true',
        default=True,
        help='Trust server certificate for SSL (default: True)'
    )
    
    parser.add_argument(
        '--host',
        type=str,
        default='0.0.0.0',
        help='FastAPI server host (default: 0.0.0.0)'
    )
    
    parser.add_argument(
        '--api-port',
        type=int,
        default=8000,
        help='FastAPI server port (default: 8000)'
    )
    
    return parser.parse_args()


def confirm_database(database: str) -> bool:
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print(f"\n‚ö†Ô∏è  Database to use: {database}")
    response = input("Continue? (y/n): ").strip().lower()
    return response == 'y'


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    args = parse_args()
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if not confirm_database(args.database):
        print("‚ùå Aborted by user")
        sys.exit(0)
    
    # –ó–∞–ø–∏—Ç –ø–∞—Ä–æ–ª—é —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è SQL Auth
    password = None
    if args.user:
        password = getpass.getpass(f"Password for {args.user}: ")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    db_config = {
        'server': args.server,
        'port': args.port,
        'user': args.user,
        'password': password,
        'database': args.database,
        'trust_server_certificate': args.trust_server_certificate
    }
    
    try:
        db = DatabaseConnection(db_config)
        print(f"‚úÖ Connected to SQL Server: {args.server}:{args.port}")
        print(f"‚úÖ Database: {args.database}")
    except Exception as e:
        print(f"‚ùå Failed to connect to SQL Server: {e}")
        sys.exit(1)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è FastAPI –¥–æ–¥–∞—Ç–∫—É
    app = create_app(db)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    print(f"\nüöÄ Starting PuPy FastAPI server on {args.host}:{args.api_port}")
    print(f"üìñ API documentation: http://{args.host}:{args.api_port}/docs")
    
    uvicorn.run(
        app,
        host=args.host,
        port=args.api_port,
        log_level="info"
    )


if __name__ == "__main__":
    main()
