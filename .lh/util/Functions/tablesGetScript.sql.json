{
    "sourceFile": "util/Functions/tablesGetScript.sql",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758022054304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758024321017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,24 @@\n+/*\r\n+# Description\r\n+Генерує повний DDL скрипт для створення таблиці, включаючи колонки, типи даних, обмеження та індекси.\r\n+\r\n+# Parameters\r\n+@table NVARCHAR(128) = NULL - назва таблиці для генерації скрипта (NULL = усі таблиці)\r\n+\r\n+# Returns\r\n+TABLE - Повертає таблицю з колонками:\r\n+- SchemaName NVARCHAR(128) - назва схеми\r\n+- TableName NVARCHAR(128) - назва таблиці\r\n+- CreateScript NVARCHAR(MAX) - повний DDL скрипт для створення таблиці\r\n+\r\n+# Usage\r\n+-- Згенерувати скрипт для конкретної таблиці\r\n+SELECT * FROM util.tablesGetScript('myTable');\r\n+\r\n+-- Згенерувати скрипти для всіх таблиць\r\n+SELECT * FROM util.tablesGetScript(NULL);\r\n+*/\r\n CREATE FUNCTION util.tablesGetScript(@table NVARCHAR(128) = NULL)\r\n RETURNS TABLE\r\n AS\r\n RETURN(\r\n"
                }
            ],
            "date": 1758022054304,
            "name": "Commit-0",
            "content": "CREATE FUNCTION util.tablesGetScript(@table NVARCHAR(128) = NULL)\r\nRETURNS TABLE\r\nAS\r\nRETURN(\r\n\tWITH TableInfo AS (\r\n\t\tSELECT\r\n\t\t\tOBJECT_SCHEMA_NAME(t.object_id) SchemaName,\r\n\t\t\tt.name TableName,\r\n\t\t\tt.object_id,\r\n\t\t\tt.type_desc,\r\n\t\t\tt.create_date,\r\n\t\t\tt.modify_date\r\n\t\tFROM sys.tables t(NOLOCK)\r\n\t\tWHERE\r\n\t\t\t(@table IS NULL OR t.object_id = ISNULL(TRY_CONVERT(INT, @table), OBJECT_ID(@table))) AND t.is_ms_shipped = 0 -- exclude system tables\r\n\t),\r\n\tColumnInfo AS (\r\n\t\tSELECT\r\n\t\t\tc.object_id,\r\n\t\t\tc.column_id,\r\n\t\t\tc.name ColumnName,\r\n\t\t\ttp.name DataType,\r\n\t\t\tCASE\r\n\t\t\t\tWHEN tp.name IN ('varchar', 'char', 'varbinary', 'binary', 'text') THEN tp.name + '(' + CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN c.max_length = -1 THEN 'MAX'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE CAST(c.max_length AS VARCHAR(5))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND + ')'\r\n\t\t\t\tWHEN tp.name IN ('nvarchar', 'nchar', 'ntext') THEN tp.name + '(' + CASE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHEN c.max_length = -1 THEN 'MAX'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE CAST(c.max_length / 2 AS VARCHAR(5))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tEND + ')'\r\n\t\t\t\tWHEN tp.name IN ('datetime2', 'time2', 'datetimeoffset') THEN tp.name + '(' + CAST(c.scale AS VARCHAR(5)) + ')'\r\n\t\t\t\tWHEN tp.name IN ('decimal', 'numeric') THEN tp.name + '(' + CAST(c.precision AS VARCHAR(5)) + ', ' + CAST(c.scale AS VARCHAR(5)) + ')'\r\n\t\t\t\tWHEN tp.name IN ('float') THEN tp.name + '(' + CAST(c.precision AS VARCHAR(5)) + ')'\r\n\t\t\t\tELSE tp.name\r\n\t\t\tEND DataTypeWithSize,\r\n\t\t\tc.is_nullable,\r\n\t\t\tc.is_identity,\r\n\t\t\tISNULL(ic.seed_value, 0) IdentitySeed,\r\n\t\t\tISNULL(ic.increment_value, 0) IdentityIncrement,\r\n\t\t\tc.is_computed,\r\n\t\t\tcc.definition ComputedDefinition,\r\n\t\t\tcc.is_persisted,\r\n\t\t\tdc.definition DefaultDefinition,\r\n\t\t\tdc.name DefaultConstraintName\r\n\t\tFROM sys.columns c(NOLOCK)\r\n\t\t\tJOIN sys.types tp(NOLOCK)ON c.user_type_id = tp.user_type_id\r\n\t\t\tLEFT JOIN sys.identity_columns ic(NOLOCK)ON c.object_id = ic.object_id AND c.column_id = ic.column_id\r\n\t\t\tLEFT JOIN sys.computed_columns cc(NOLOCK)ON c.object_id = cc.object_id AND c.column_id = cc.column_id\r\n\t\t\tLEFT JOIN sys.default_constraints dc(NOLOCK)ON c.object_id = dc.parent_object_id AND c.column_id = dc.parent_column_id\r\n\t\tWHERE\r\n\t\t\tc.object_id IN(SELECT TableInfo.object_id FROM TableInfo)\r\n\t),\r\n\tPrimaryKeyInfo AS (\r\n\t\tSELECT\r\n\t\t\tkc.parent_object_id object_id,\r\n\t\t\tkc.name ConstraintName,\r\n\t\t\tSTRING_AGG(QUOTENAME(c.name), ', ') WITHIN GROUP(ORDER BY ic.key_ordinal) KeyColumns\r\n\t\tFROM sys.key_constraints kc(NOLOCK)\r\n\t\t\tINNER JOIN sys.index_columns ic(NOLOCK)ON kc.parent_object_id = ic.object_id AND kc.unique_index_id = ic.index_id\r\n\t\t\tINNER JOIN sys.columns c(NOLOCK)ON ic.object_id = c.object_id AND ic.column_id = c.column_id\r\n\t\tWHERE\r\n\t\t\tkc.type = 'PK' AND kc.parent_object_id IN(SELECT TableInfo.object_id FROM TableInfo)\r\n\t\tGROUP BY\r\n\t\t\tkc.parent_object_id,\r\n\t\t\tkc.name\r\n\t),\r\n\tForeignKeyDetails AS (\r\n\t\tSELECT\r\n\t\t\tfk.parent_object_id object_id,\r\n\t\t\tfk.name ConstraintName,\r\n\t\t\tSTRING_AGG(QUOTENAME(pc.name), ', ') WITHIN GROUP(ORDER BY fkc.constraint_column_id) ParentColumns,\r\n\t\t\tQUOTENAME(OBJECT_SCHEMA_NAME(fk.referenced_object_id)) + '.' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) ReferencedTable,\r\n\t\t\tSTRING_AGG(QUOTENAME(rc.name), ', ') WITHIN GROUP(ORDER BY fkc.constraint_column_id) ReferencedColumns\r\n\t\tFROM sys.foreign_keys fk(NOLOCK)\r\n\t\t\tINNER JOIN sys.foreign_key_columns fkc(NOLOCK)ON fk.object_id = fkc.constraint_object_id\r\n\t\t\tINNER JOIN sys.columns pc(NOLOCK)ON fkc.parent_object_id = pc.object_id AND fkc.parent_column_id = pc.column_id\r\n\t\t\tINNER JOIN sys.columns rc(NOLOCK)ON fkc.referenced_object_id = rc.object_id AND fkc.referenced_column_id = rc.column_id\r\n\t\tWHERE\r\n\t\t\tfk.parent_object_id IN(SELECT TableInfo.object_id FROM TableInfo)\r\n\t\tGROUP BY\r\n\t\t\tfk.parent_object_id,\r\n\t\t\tfk.object_id,\r\n\t\t\tfk.name,\r\n\t\t\tfk.referenced_object_id\r\n\t),\r\n\tForeignKeyInfo AS (\r\n\t\tSELECT\r\n\t\t\tForeignKeyDetails.object_id,\r\n\t\t\tSTRING_AGG(\r\n\t\t\t\t'CONSTRAINT ' + QUOTENAME(ForeignKeyDetails.ConstraintName) + ' FOREIGN KEY (' + ForeignKeyDetails.ParentColumns + ') REFERENCES '\r\n\t\t\t\t+ ForeignKeyDetails.ReferencedTable + ' (' + ForeignKeyDetails.ReferencedColumns + ')',\r\n\t\t\t\t', '\r\n\t\t\t) ForeignKeyConstraints\r\n\t\tFROM ForeignKeyDetails\r\n\t\tGROUP BY ForeignKeyDetails.object_id\r\n\t),\r\n\tCheckConstraintInfo AS (\r\n\t\tSELECT\r\n\t\t\tcc.parent_object_id object_id,\r\n\t\t\tSTRING_AGG('CONSTRAINT ' + QUOTENAME(cc.name) + ' CHECK ' + cc.definition, ', ') CheckConstraints\r\n\t\tFROM sys.check_constraints cc(NOLOCK)\r\n\t\tWHERE\r\n\t\t\tcc.parent_object_id IN(SELECT TableInfo.object_id FROM TableInfo)\r\n\t\tGROUP BY cc.parent_object_id\r\n\t)\r\n\tSELECT\r\n\t\tutil.metadataGetObjectName(ti.object_id) tableName,\r\n\t\t'CREATE TABLE ' + QUOTENAME(ti.SchemaName) + '.' + QUOTENAME(ti.TableName) + ' (' + CHAR(13) + CHAR(10)\r\n\t\t+ STRING_AGG(\r\n\t\t\t\t'    ' + QUOTENAME(ci.ColumnName) + ' '\r\n\t\t\t\t+ CASE\r\n\t\t\t\t\t\tWHEN ci.is_computed = 1 THEN 'AS ' + ci.ComputedDefinition + CASE WHEN ci.is_persisted = 1 THEN ' PERSISTED' ELSE '' END\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\t\tci.DataTypeWithSize\r\n\t\t\t\t\t\t\t+ CASE\r\n\t\t\t\t\t\t\t\t\tWHEN ci.is_identity = 1 THEN ' IDENTITY(' + CAST(ci.IdentitySeed AS VARCHAR(10)) + ', ' + CAST(ci.IdentityIncrement AS VARCHAR(10)) + ')'\r\n\t\t\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\t\t\tEND + CASE WHEN ci.is_nullable = 0 THEN ' NOT NULL' ELSE ' NULL' END\r\n\t\t\t\t\t\t\t+ CASE\r\n\t\t\t\t\t\t\t\t\tWHEN ci.DefaultDefinition IS NOT NULL THEN ' DEFAULT ' + ci.DefaultDefinition\r\n\t\t\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\tEND,\r\n\t\t\t\t',' + CHAR(13) + CHAR(10)\r\n\t\t\t) WITHIN GROUP(ORDER BY ci.column_id)\r\n\t\t+ CASE\r\n\t\t\t\tWHEN pki.KeyColumns IS NOT NULL THEN\r\n\t\t\t\t\t',' + CHAR(13) + CHAR(10) + '    CONSTRAINT ' + QUOTENAME(pki.ConstraintName) + ' PRIMARY KEY (' + pki.KeyColumns + ')'\r\n\t\t\t\tELSE ''\r\n\t\t\tEND + CASE\r\n\t\t\t\t\t\t\tWHEN fki.ForeignKeyConstraints IS NOT NULL THEN ',' + CHAR(13) + CHAR(10) + '    ' + fki.ForeignKeyConstraints\r\n\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\tEND + CASE\r\n\t\t\t\t\t\t\t\t\t\tWHEN cci.CheckConstraints IS NOT NULL THEN ',' + CHAR(13) + CHAR(10) + '    ' + cci.CheckConstraints\r\n\t\t\t\t\t\t\t\t\t\tELSE ''\r\n\t\t\t\t\t\t\t\t\tEND + CHAR(13) + CHAR(10) + ');' statement\r\n\tFROM TableInfo ti\r\n\t\tINNER JOIN ColumnInfo ci ON ti.object_id = ci.object_id\r\n\t\tLEFT JOIN PrimaryKeyInfo pki ON ti.object_id = pki.object_id\r\n\t\tLEFT JOIN ForeignKeyInfo fki ON ti.object_id = fki.object_id\r\n\t\tLEFT JOIN CheckConstraintInfo cci ON ti.object_id = cci.object_id\r\n\tGROUP BY\r\n\t\tti.object_id,\r\n\t\tti.SchemaName,\r\n\t\tti.TableName,\r\n\t\tpki.ConstraintName,\r\n\t\tpki.KeyColumns,\r\n\t\tfki.ForeignKeyConstraints,\r\n\t\tcci.CheckConstraints\r\n);"
        }
    ]
}