{
    "sourceFile": "util/Procedures/errorHandler.sql",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758021849477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758021849477,
            "name": "Commit-0",
            "content": "/*\r\n# Description\r\nУніверсальна процедура обробки помилок, яка отримує системну інформацію про помилку, записує інформацію про неї, \r\nможе надіслати на електронну пошту. Записує помилки в таблицю util.ErrorLog і повертає детальну інформацію.\r\nПроцедура може використовувати для помилок, отриманих із блоку CATCH або для відображення стану.\r\n\r\n# Parameters\r\n@attachment NVARCHAR(MAX) = NULL - додаткова інформація або повідомлення для додавання разом з помилкою\r\n\r\n# Returns\r\nНічого не повертає. Записує інформацію про помилку в таблицю util.ErrorLog.\r\nВ разі використання поза блоком CATCH, повертає інформацію про поточний стан через SELECT.\r\n\r\n# Usage\r\nBEGIN TRY\r\n    -- Ваш код\r\nEND TRY\r\nBEGIN CATCH\r\n    EXEC util.errorHandler @attachment = 'Додаткова інформація про контекст';\r\nEND CATCH\r\n*/\r\nALTER PROCEDURE util.errorHandler\r\n    @attachment NVARCHAR(MAX) = NULL\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n    \r\n    DECLARE @ErrorNumber INT = ERROR_NUMBER();\r\n    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();\r\n    DECLARE @ErrorState INT = ERROR_STATE();\r\n    DECLARE @ErrorProcedure NVARCHAR(128) = ERROR_PROCEDURE();\r\n    DECLARE @ErrorLine INT = ERROR_LINE();\r\n    DECLARE @ErrorLineText NVARCHAR(max) = (SELECT line FROM util.modulesSplitToLines(@ErrorProcedure, DEFAULT) WHERE ordinal = @ErrorLine);\r\n    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();\r\n    DECLARE @OriginalLogin NVARCHAR(128) = ORIGINAL_LOGIN();\r\n    DECLARE @SessionId SMALLINT = @@SPID;\r\n    DECLARE @HostName NVARCHAR(128) = HOST_NAME();\r\n    DECLARE @ProgramName NVARCHAR(128) = PROGRAM_NAME();\r\n    DECLARE @DatabaseName NVARCHAR(128) = DB_NAME();\r\n    DECLARE @UserName NVARCHAR(128) = USER_NAME();\r\n\r\n    DECLARE @SessionInfo XML = NULL;\r\n    \r\n\r\n    \r\n    -- Collect detailed session information\r\n    BEGIN TRY\r\n        SELECT @SessionInfo = (\r\n            SELECT \r\n                s.session_id,\r\n                s.login_time,\r\n                s.host_name,\r\n                s.program_name,\r\n                s.client_interface_name,\r\n                s.login_name,\r\n                s.nt_domain,\r\n                s.nt_user_name,\r\n                s.original_login_name,\r\n                s.status,\r\n                s.context_info,\r\n                s.cpu_time,\r\n                s.memory_usage,\r\n                s.total_scheduled_time,\r\n                s.total_elapsed_time,\r\n                s.endpoint_id,\r\n                s.last_request_start_time,\r\n                s.last_request_end_time,\r\n                s.reads,\r\n                s.writes,\r\n                s.logical_reads,\r\n                CASE \r\n                    WHEN r.session_id IS NOT NULL THEN\r\n                        (SELECT \r\n                            r.request_id,\r\n                            r.start_time,\r\n                            r.status AS request_status,\r\n                            r.command,\r\n                            r.database_id,\r\n                            r.blocking_session_id,\r\n                            r.wait_type,\r\n                            r.wait_time,\r\n                            r.wait_resource,\r\n                            r.open_transaction_count,\r\n                            r.open_resultset_count,\r\n                            r.transaction_id,\r\n                            r.percent_complete,\r\n                            r.estimated_completion_time,\r\n                            r.cpu_time AS request_cpu_time,\r\n                            r.total_elapsed_time AS request_elapsed_time,\r\n                            r.reads AS request_reads,\r\n                            r.writes AS request_writes,\r\n                            r.logical_reads AS request_logical_reads,\r\n                            r.row_count,\r\n                            r.granted_query_memory,\r\n                            r.executing_managed_code\r\n                        FOR XML PATH('request'), TYPE)\r\n                    ELSE NULL\r\n                END AS current_request\r\n            FROM sys.dm_exec_sessions s WITH (NOLOCK)\r\n            LEFT JOIN sys.dm_exec_requests r WITH (NOLOCK) ON s.session_id = r.session_id\r\n            WHERE s.session_id = @SessionId\r\n            FOR XML PATH('session'), TYPE\r\n        );\r\n    END TRY\r\n    BEGIN CATCH\r\n        SET @SessionInfo = NULL;\r\n    END CATCH\r\n    \r\n    -- Insert error information into log table\r\n    BEGIN TRY\r\n        INSERT INTO util.ErrorLog (\r\n            ErrorNumber,\r\n            ErrorSeverity,\r\n            ErrorState,\r\n            ErrorProcedure,\r\n            ErrorLine,\r\n            ErrorLineText,\r\n            ErrorMessage,\r\n            OriginalLogin,\r\n            SessionId,\r\n            HostName,\r\n            ProgramName,\r\n            DatabaseName,\r\n            UserName,\r\n            Attachment,\r\n            SessionInfo\r\n        )\r\n        VALUES (\r\n            @ErrorNumber,\r\n            @ErrorSeverity,\r\n            @ErrorState,\r\n            @ErrorProcedure,\r\n            @ErrorLine,\r\n\t\t\t\t\t\t@ErrorLineText,\r\n            @ErrorMessage,\r\n            @OriginalLogin,\r\n            @SessionId,\r\n            @HostName,\r\n            @ProgramName,\r\n            @DatabaseName,\r\n            @UserName,\r\n            @attachment,\r\n            @SessionInfo\r\n        );\r\n        \r\n\r\n    END TRY\r\n    BEGIN CATCH\r\n        -- If we can't log the error, at least output the original error information\r\n        SELECT \r\n            @ErrorNumber AS ErrorNumber,\r\n            @ErrorSeverity AS ErrorSeverity,\r\n            @ErrorState AS ErrorState,\r\n            @ErrorProcedure AS ErrorProcedure,\r\n            @ErrorLine AS ErrorLine,\r\n            @ErrorMessage AS ErrorMessage,\r\n            'Failed to log error: ' + ERROR_MESSAGE() AS LoggingError;\r\n    END CATCH\r\n     \r\nEND;"
        }
    ]
}